{"version":3,"sources":["Components/card/card.component.jsx","Components/card-list/card-list.component.jsx","Components/search-box/search.component.jsx","Components/Monsters.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","cards","monsters","map","a","key","Search","this","placeholder","handleChange","searchValue","type","onChange","value","Component","Monsters","state","searchField","updateSearch","bind","fetch","then","res","json","users","setState","e","target","filteredMonsters","filter","toLowerCase","includes","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mWAYeA,G,YAVF,SAAAC,GACT,OACI,yBAAKC,UAAU,kBACX,yBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAKL,EAAMG,QAAQG,OAC/F,gCAAMN,EAAMG,QAAQG,MAC5B,2BAAIN,EAAMG,QAAQI,UCOPC,EAVE,SAAAR,GACjB,IAAMS,EAAQT,EAAMU,SAASC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAMC,IAAKD,EAAER,GAAID,QAAWS,OAC9D,OACI,yBAAMX,UAAU,aACXQ,ICWEK,G,MAff,YACI,WAAYd,GAAO,qEACTA,IAFd,sEAIc,IAAD,EAC4Ce,KAAKf,MAA/CgB,EADF,EACEA,YAAaC,EADf,EACeA,aAAcC,EAD7B,EAC6BA,YAClC,OACI,6BACI,2BAAOjB,UAAU,SAASkB,KAAK,QAAQH,YAAcA,EACpDI,SAAUH,EAAcI,MAAOH,SAThD,GAA4BI,cC4CbC,EA5Cf,YACI,WAAYvB,GAAO,IAAD,8BACd,4CAAMA,KACDwB,MAAQ,CACTd,SAAW,GACXe,YAAa,IAGjB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBAPN,EADtB,iFAWwB,IAAD,OACfC,MAAM,8CACLC,MAAK,SAAAC,GAAG,OAAGA,EAAIC,UACfF,MAAK,SAAAG,GAAK,OAAK,EAAKC,SAAS,CAC1BvB,SAAS,YAAKsB,UAf1B,mCAoBiBE,GACTnB,KAAKkB,SAAS,CACVR,YAAaS,EAAEC,OAAOd,UAtBlC,+BA0Bc,IAAD,EAC2BN,KAAKS,MAA9Bd,EADF,EACEA,SAAUe,EADZ,EACYA,YACXW,EAAmB1B,EAAS2B,QAAO,SAAAlC,GAAO,OAAIA,EAAQG,KAAKgC,cAAcC,SAASd,EAAYa,kBACpG,OACI,6BACI,gDACA,kBAAC,EAAD,CACItB,YAAc,kBACdE,YAAeH,KAAKS,MAAMC,YAC1BR,aAAcF,KAAKW,eAEvB,kBAAC,EAAD,CAAUhB,SAAY0B,SArCtC,GAA8Bd,a,MCQfkB,MARf,WACE,OACE,yBAAKvC,UAAU,OACb,kBAAC,EAAD,QCKcwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,kB","file":"static/js/main.da70c802.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.style.css'\r\nconst Card = props => {\r\n    return (\r\n        <div className=\"card-container\">\r\n            <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt={props.monster.name}/>\r\n            <h2> {props.monster.name}</h2>\r\n    <p>{props.monster.email}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport './card-list.style.css';\r\nimport Card from '../card/card.component';\r\n\r\nconst CardList = props => {\r\nconst cards = props.monsters.map(a => <Card key={a.id} monster = {a} />)\r\n    return (\r\n        <div  className=\"card-list\">\r\n            {cards}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default CardList;\r\n","import React, { Component } from 'react';\r\nimport './search.style.css'\r\n\r\n\r\nexport class Search extends Component {\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n    render() {\r\n        const {placeholder, handleChange, searchValue} = this.props;\r\n        return (\r\n            <div>\r\n                <input className=\"search\" type=\"seach\" placeholder= {placeholder}\r\n                 onChange={handleChange} value={searchValue}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Search;\r\n","import React, { Component } from 'react';\r\nimport CardList from './card-list/card-list.component';\r\nimport SearchBox from './search-box/search.component';\r\n\r\nexport class Monsters extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            monsters : [],\r\n            searchField: ''\r\n        }\r\n    \r\n        this.updateSearch = this.updateSearch.bind(this)\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(res=> res.json())\r\n        .then(users =>  this.setState({\r\n            monsters: [...users]\r\n        }))\r\n       \r\n    }\r\n\r\n    updateSearch(e) {\r\n        this.setState({\r\n            searchField: e.target.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {monsters, searchField} = this.state;\r\n        const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase())) \r\n        return (\r\n            <div>\r\n                <h1>Monsters Rolodex</h1>\r\n                <SearchBox\r\n                    placeholder = 'Search monsters'\r\n                    searchValue = {this.state.searchField}\r\n                    handleChange={this.updateSearch} \r\n                />\r\n                <CardList monsters = {filteredMonsters} />\r\n            </div>\r\n           \r\n        );\r\n    }\r\n}\r\n\r\nexport default Monsters;\r\n","import React from 'react';\nimport Monster from './Components/Monsters'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Monster />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}